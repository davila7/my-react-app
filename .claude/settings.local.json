{
  "env": {
    "DISCORD_WEBHOOK_URL": "https://discord.com/api/webhooks/1421887462371889152/T_qkH3vmgW_CSiLb-fu_4ndiHVgYOPW6kpPJhD-Dmfqv3my9v63BnkI7wwuBB2SnElOB"
  },
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(npm start)",
      "Bash(npx docusaurus start:*)",
      "Bash(git add:*)",
      "Bash(gh run view:*)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nChange footer background color to red\n\nUpdated Footer.css to use red background for a more vibrant footer design.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"Add second test comment for workflow\n\nAnother small CSS change to trigger the Docusaurus documentation workflow.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(gh pr create --title \"Second test of Docusaurus workflow\" --body \"$(cat <<''EOF''\n## Summary\n‚Ä¢ Added another test comment to Footer.css\n‚Ä¢ Testing the Docusaurus documentation workflow execution again\n\n## Purpose\nThis is a second attempt to verify the workflow triggers correctly on CSS file changes.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\nEOF\n)\")",
      "Bash(git commit -m \"Update Claude settings configuration\n\nFix settings.local.json configuration for proper workflow execution.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git commit -m \"Add third test comment for workflow\n\nTesting workflow execution after settings.local.json fix.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(gh pr create --title \"Third test after settings fix\" --body \"$(cat <<''EOF''\n## Summary\n‚Ä¢ Added third test comment to Footer.css\n‚Ä¢ Testing workflow after fixing settings.local.json configuration\n\n## Test\nVerifying that the Docusaurus workflow executes properly now that settings are corrected.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\nEOF\n)\")"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "if echo \"$CLAUDE_TOOL_COMMAND\" | grep -q 'git checkout -b'; then BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | sed -n 's/.*git checkout -b \\([^ ]*\\).*/\\1/p'); if [[ -n \"$BRANCH_NAME\" ]] && [[ \"$BRANCH_NAME\" != \"main\" ]] && [[ \"$BRANCH_NAME\" != \"develop\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid Git Flow branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  ‚Ä¢ feature/<descriptive-name>\"; echo \"  ‚Ä¢ release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  ‚Ä¢ hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"\"; echo \"Invalid:\"; echo \"  ‚ùå $BRANCH_NAME (missing Git Flow prefix)\"; echo \"  ‚ùå feat/something (use 'feature/' not 'feat/')\"; echo \"  ‚ùå fix/bug (use 'hotfix/' not 'fix/')\"; echo \"\"; echo \"üí° Use Git Flow commands instead:\"; echo \"  /feature <name>  - Create feature branch\"; echo \"  /release <version> - Create release branch\"; echo \"  /hotfix <name>   - Create hotfix branch\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Valid examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"\"; echo \"Invalid:\"; echo \"  ‚ùå release/1.0.0 (missing 'v' prefix)\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; echo \"  ‚ùå $BRANCH_NAME\"; echo \"\"; echo \"üí° Use: /release v1.2.0\"; exit 1; fi; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"‚ùå Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feature/user-authentication\"; echo \"  ‚úÖ release/v1.2.0\"; echo \"  ‚úÖ hotfix/critical-security-fix\"; echo \"  ‚ùå my-new-feature (missing prefix)\"; echo \"  ‚ùå feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"‚ùå Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ release/v1.0.0\"; echo \"  ‚úÖ release/v2.1.3\"; echo \"  ‚úÖ release/v1.0.0-beta.1\"; echo \"  ‚ùå release/1.0.0 (missing 'v')\"; echo \"  ‚ùå release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "python3 \"$CLAUDE_PROJECT_DIR\"/.claude/hooks/validate-branch-name.py"
          }
        ]
      },
      {
        "matcher": "Bash(git commit:*)",
        "hooks": [
          {
            "type": "command",
            "command": "COMMIT_MSG=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oP '(?<=-m \")[^\"]+' | head -1); if [[ -n \"$COMMIT_MSG\" ]] && [[ ! \"$COMMIT_MSG\" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\\(.+\\))?:\\  ]]; then echo \"‚ùå Invalid commit message format\"; echo \"\"; echo \"Commit messages must follow Conventional Commits:\"; echo \"  type(scope): description\"; echo \"\"; echo \"Types:\"; echo \"  feat:     New feature\"; echo \"  fix:      Bug fix\"; echo \"  docs:     Documentation changes\"; echo \"  style:    Code style changes (formatting)\"; echo \"  refactor: Code refactoring\"; echo \"  perf:     Performance improvements\"; echo \"  test:     Adding or updating tests\"; echo \"  chore:    Maintenance tasks\"; echo \"  ci:       CI/CD changes\"; echo \"  build:    Build system changes\"; echo \"  revert:   Revert previous commit\"; echo \"\"; echo \"Examples:\"; echo \"  ‚úÖ feat: add user authentication\"; echo \"  ‚úÖ feat(auth): implement JWT tokens\"; echo \"  ‚úÖ fix: resolve memory leak in parser\"; echo \"  ‚úÖ fix(api): handle null responses\"; echo \"  ‚úÖ docs: update API documentation\"; echo \"  ‚ùå Added new feature (no type)\"; echo \"  ‚ùå feat:add feature (missing space)\"; echo \"  ‚ùå feature: add login (wrong type)\"; echo \"\"; echo \"Your message: $COMMIT_MSG\"; exit 1; fi"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "python3 \"$CLAUDE_PROJECT_DIR\"/.claude/hooks/conventional-commits.py"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "bash -c 'if ! git rev-parse --git-dir >/dev/null 2>&1; then echo \"Not a git repository\"; exit 0; fi; BRANCH=$(git branch --show-current 2>/dev/null); if [ -z \"$BRANCH\" ]; then echo \"Detached HEAD\"; exit 0; fi; ICON=\"üìÅ\"; TARGET=\"\"; if [[ $BRANCH == feature/* ]]; then ICON=\"üåø\"; TARGET=\"‚Üí develop\"; elif [[ $BRANCH == release/* ]]; then ICON=\"üöÄ\"; TARGET=\"‚Üí main\"; elif [[ $BRANCH == hotfix/* ]]; then ICON=\"üî•\"; TARGET=\"‚Üí main+develop\"; elif [[ $BRANCH == \"develop\" ]]; then ICON=\"üîÄ\"; elif [[ $BRANCH == \"main\" ]]; then ICON=\"üè†\"; fi; AHEAD=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo \"0\"); BEHIND=$(git rev-list --count HEAD..@{u} 2>/dev/null || echo \"0\"); SYNC=\"\"; if [ \"$AHEAD\" -gt 0 ]; then SYNC=\" ‚Üë$AHEAD\"; fi; if [ \"$BEHIND\" -gt 0 ]; then SYNC=\"$SYNC ‚Üì$BEHIND\"; fi; MODIFIED=$(git status --porcelain 2>/dev/null | grep \"^ M\" | wc -l | tr -d \" \"); ADDED=$(git status --porcelain 2>/dev/null | grep \"^??\" | wc -l | tr -d \" \"); DELETED=$(git status --porcelain 2>/dev/null | grep \"^ D\" | wc -l | tr -d \" \"); CHANGES=\"\"; if [ \"$MODIFIED\" -gt 0 ]; then CHANGES=\" ‚óè$MODIFIED\"; fi; if [ \"$ADDED\" -gt 0 ]; then CHANGES=\"$CHANGES ‚úö$ADDED\"; fi; if [ \"$DELETED\" -gt 0 ]; then CHANGES=\"$CHANGES ‚úñ$DELETED\"; fi; if [ -n \"$TARGET\" ]; then echo \"$ICON $BRANCH$SYNC$CHANGES | üéØ $TARGET\"; else echo \"$ICON $BRANCH$SYNC$CHANGES\"; fi'"
  }
}
